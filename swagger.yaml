openapi: 3.0.1
info:
  title: tickets
  description: "Simple tickets API"
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
  - url: https://localhost/api/v1
  - url: http://localhost/api/v1
tags:
  - name: ticket
    description: Everything about your tickets
    externalDocs:
      description: Find out more
      url: http://swagger.io
  - name: user
    description: Operations about user
    externalDocs:
      description: Find out more about our store
      url: http://swagger.io
  - name: event
paths:
  /ticket:
    post:
      tags:
        - ticket
      summary: Create ticket
      description: This can only be done by the logged in user.
      operationId: createTicket
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                eventID:
                  type: integer
                  description: Added eventId
        required: true
      responses:
        200:
          description: Successfully created
          content:
            application/json:
              schema:
                type: number
                format: int64
        403:
          description: You can't create tickets
        405:
          description: Invalid input
          content: {}
      security:
        - tickets_auth:
            - create:tickets  
          
  /ticket/{ticketId}:
    get:
      tags:
        - ticket
      summary: Find ticket by ID
      description: Returns a single ticket
      operationId: getticketById
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Ticket"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ticket not found
          content: {}
      security:
        - tickets_auth:
            - read:tickets
  /ticket/{ticketId}/buy:
    put:
      tags:
        - ticket
      summary: Buy ticket
      description: Buying a ticket.
      operationId: buyTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to buy
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successfully bought
          content:
            application/json:
              schema:
                type: number
                format: int64
        405:
          description: Invalid input
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ticket not found
          content: {}
      security:
        - tickets_auth:
            - buy:tickets
  /ticket/{ticketId}/book:
    put:
      tags:
        - ticket
      summary: Book ticket
      description: Booking a ticket.
      operationId: bookTicket
      parameters:
        - name: ticketId
          in: path
          description: ID of ticket to book
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: Successfully booked
          content:
            application/json:
              schema:
                type: number
                format: int64
        405:
          description: Invalid input
          content: {}
        400:
          description: Invalid ID supplied
          content: {}
        403:
          description: You don't have enough rights to modify this
          content: {}
        404:
          description: ticket not found
          content: {}
      security:
        - tickets_auth:
            - book:tickets

    delete:
      tags:
        - ticket
      summary: Deletes a booking
      operationId: deleteBooking
      parameters:
        - name: api_key
          in: header
          schema:
            type: string
        - name: ticketId
          in: path
          description: ticket id to delete booking
          required: true
          schema:
            type: integer
            format: int64
      responses:
        400:
          description: Invalid ID supplied
          content: {}
        403:
          description: You don't have enough rights to modify this
          content: {}
        404:
          description: ticket not found
          content: {}
      security:
        - tickets_auth:
            - book:tickets

  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: Updated tags of the ticket
                firstName:
                  type: string
                  description: Updated editors of the ticket
                lastName:
                  type: string
                  description: Updated lastName of the user
                email:
                  type: string
                  description: Updated email of the user
                password:
                  type: string
                  description: Updated password of the user
                phone:
                  type: string
                  description: Updated phone of the user
        required: true
      responses:
        200:
          description: Successfully created
          content:
            application/json:
              schema:
                type: number
                format: int64
        405:
          description: Invalid input
          content: {}

    put:
      tags:
        - user
      summary: Update an existing user
      operationId: updateUser
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                username:
                  type: string
                  description: Updated tags of the ticket
                firstName:
                  type: string
                  description: Updated editors of the ticket
                lastName:
                  type: string
                  description: Updated lastName of the user
                email:
                  type: string
                  description: Updated email of the user
                password:
                  type: string
                  description: Updated password of the user
                phone:
                  type: string
                  description: Updated phone of the user
        required: true
      responses:
        200:
          description: Successfully updated
          content: {}
        400:
          description: Invalid Username supplied
          content: {}
        406:
          description: Invalid user field supplied
          content: {}
        403:
          description: Not authorized
          content: {}
        500:
          description: Cannot update user field
      security:
        - tickets_auth:
            - modify:user
    delete:
      tags:
        - user
      summary: Delete existing user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      responses:
        200:
          description: Successfully deleted
          content: {}
        403:
          description: Insufficient permissions
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - tickets_auth:
            - delete:user
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: true
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
        400:
          description: Invalid username/password supplied
          content: {}
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
          content: {}
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
  /user/{username}/tickets:
    get:
      tags:
        - user
      summary: Get user tickets by user name
      operationId: getUsertickets
      parameters:
        - name: username
          in: path
          description: "The name that needs to be fetched. Use user1 for testing. "
          required: true
          schema:
            type: string
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Ticket"
        400:
          description: Invalid username supplied
          content: {}
        404:
          description: User not found
          content: {}
      security:
        - tickets_auth:
            - read:tickets
  
  /event:
    post:
      tags:
        - event
      summary: Create event
      description: This can only be done by the logged in user.
      operationId: createEvent
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              properties:
                name:
                  type: string
                date:
                  type: integer
                  format: date-time
                  description: Added event
        required: true
      responses:
        200:
          description: Successfully created
          content:
            application/json:
              schema:
                type: number
                format: int64
        403:
          description: You can't create event
        405:
          description: Invalid input
          content: {}
      security:
        - tickets_auth:
            - create:event

  /event/getAvailableEvents:
    get:
      tags:
        - event
      summary: Get event by ID
      description: Returns ID of event
      operationId: getAvailableEventById
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  $ref: "#/components/schemas/Event"
  /event/{eventId}:
    get:
      tags:
        - event
      summary: Get event by ID
      description: Returns ID of event
      operationId: getEventById
      parameters:
        - name: eventId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Event"
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: ticket not found
          content: {}
  /event/{eventId}/availableTickets:
    get:
      tags:
        - event
      summary: Get available tickets by ID
      description: Returns ID of available tickets
      operationId: getEventAvailableTicketsById
      parameters:
        - name: eventId
          in: path
          description: ID of ticket to return
          required: true
          schema:
            type: integer
            format: int64
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items: 
                  type: integer
        400:
          description: Invalid ID supplied
          content: {}
        404:
          description: No tickets available
          content: {}
  
  
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        bookedTickets:
          type: array
          items: 
            $ref: "#/components/schemas/Ticket"
        boughtTickets:
          type: array
          items:
            $ref: "#/components/schemas/Ticket"
    Event:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        date:
          type: string
          format: date-time
          
    Ticket:
      type: object
      properties:
        id:
          type: integer
          format: int64
        eventID: 
          type: integer
        isBooked:
          type: boolean
          default: false
        isBought:
          type: boolean
          default: false
        userID:
          type: integer
          
  securitySchemes:
    tickets_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: http://ticketstore.swagger.io/oauth/dialog
          scopes:
            read:user: read user information
            delete:user: delete user
            change:user: modify user information
            buy:tickets: buy tickets
            book:tickets: book tickets
            create:tickets: create tickets
            create:event: create event
